# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  SPHINX_VENV: "/home/runner/.venv/"
  CI_COMMIT_MESSAGE: Continuous Integration Build Documentation Artifacts
  CI_COMMIT_AUTHOR: Continuous Integration

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: myci-actions/add-deb-repo@11
      with:
        repo: deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-16 main
        repo-name: llvm
        keys-asc: https://apt.llvm.org/llvm-snapshot.gpg.key

    - uses: actions/checkout@v3
    
    - uses: awalsh128/cache-apt-pkgs-action@latest
      with:
          packages: libclang1-16  binutils-dev build-essential clang-format clang-tidy cmake curl expat gdb git gnuplot jq libcmocka-dev libcsv-dev   libcurl4-openssl-dev      libesmtp-dev      libiberty-dev libjson-c-dev     liblog4c-dev     libmnl-dev     libsqlite3-0   libsqlite3-dev    libssl-dev    linux-tools-generic    locales    net-tools netcat  ninja-build openssl pandoc pandoc-plantuml-filter pkg-config python-is-python3 python3-pip python3-venv sqlite3 sudo wget zlib1g-dev 
          version: 1.0

    - name: Prep
      run: echo "beautifulsoup4 \n
           sphinx \
           sphinx-c-autodoc \n
           sphinx-copybutton \n
           sphinx-favicon \n
           sphinxcontrib-programoutput" > requirements.txt

    - uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip' # caching pip dependencies
    - run: pip install -r requirements.txt
          
#    - name: Prep
#      run: python -m venv /home/runner/.venv 
#           && . /home/runner/.venv/bin/activate 
#           && python -m pip install 
#           beautifulsoup4  
#           sphinx 
#           sphinx-c-autodoc 
#           sphinx-copybutton 
#           sphinx-favicon 
#           sphinxcontrib-programoutput

#    - name: Prep2
#      run: wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc 
#           && echo "# for llvm 16 packages"  | sudo tee -a /etc/apt/sources.list
#           && echo "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-16 main"  | sudo tee -a /etc/apt/sources.list
#           && echo "deb-src http://apt.llvm.org/jammy/ llvm-toolchain-jammy-16 main"  | sudo tee -a /etc/apt/sources.list
#           && cat  /etc/apt/sources.list
#           && sudo apt-get update 
#           && sudo apt-get install -y libclang1-16 
#           && sudo ln -s /usr/lib/x86_64-linux-gnu/libclang-16.so.1 /usr/lib/libclang-16.so

    - name: Prep2
      run:  sudo ln -s /usr/lib/x86_64-linux-gnu/libclang-16.so.1 /usr/lib/libclang-16.so
   
    - name: Build
      # Build your program with the given configuration
      run: safu/ci/build.sh


    - name: Build Docs
      # Build your program with the given configuration
      run: safu/ci/build_doc.sh

    # Commit and push all changed files.
    - name: Deploy Docs
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        branch: gh_pages
        folder: ${{github.workspace}}/safu/doc/build

